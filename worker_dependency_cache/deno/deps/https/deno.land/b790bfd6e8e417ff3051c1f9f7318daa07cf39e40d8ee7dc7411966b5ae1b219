// This file was modified by Oracle on July 5, 2021.
// Errors generated by asynchronous authentication plugins are now being
// handled and subsequently emitted at the command level.
// Modifications copyright (c) 2021, Oracle and/or its affiliates.


import { Buffer } from "../../deps.ts";
import { Connection } from "../connection.ts";

import { AuthSwitchRequest } from "../packets/auth_switch_request.ts";
import { AuthSwitchRequestMoreData } from "../packets/auth_switch_request_more_data.ts";
import { AuthSwitchResponse } from "../packets/auth_switch_response.ts";

import sha256_password from "../auth_plugins/sha256_password.ts";
import caching_sha2_password from "../auth_plugins/caching_sha2_password.ts";
import mysql_native_password from "../auth_plugins/mysql_native_password.ts";
import { Packet } from "../packets/packet.ts";
import { Command } from "./command.ts";

// deno-lint-ignore no-explicit-any
const standardAuthPlugins: any = {
  sha256_password: sha256_password({}),
  caching_sha2_password: caching_sha2_password({}),
  mysql_native_password: mysql_native_password({})
};

function warnLegacyAuthSwitch() {
  console.warn(
    'WARNING! authSwitchHandler api is deprecated, please use new authPlugins api'
  );
}

function authSwitchPluginError(error: Error, command: Command) {
  // Authentication errors are fatal
  // deno-lint-ignore no-explicit-any
  (error as any).code = 'AUTH_SWITCH_PLUGIN_ERROR';
  // deno-lint-ignore no-explicit-any
  (error as any).fatal = true;

  command.emit('error', error);
}

function authSwitchRequest(packet: Packet, connection: Connection, command: Command) {
  const { pluginName, pluginData } = AuthSwitchRequest.fromPacket(
    packet
  );
  let authPlugin =
    connection.config.authPlugins && connection.config.authPlugins[pluginName];

  // legacy plugin api don't allow to override mysql_native_password
  // if pluginName is mysql_native_password it's using standard auth4.1 auth
  if (
    connection.config.authSwitchHandler &&
    pluginName !== 'mysql_native_password'
  ) {
    const legacySwitchHandler = connection.config.authSwitchHandler;
    warnLegacyAuthSwitch();
    legacySwitchHandler({ pluginName, pluginData }, (err: Error|null, data: Buffer) => {
      if (err) {
        return authSwitchPluginError(err, command);
      }
      connection.writePacket(new AuthSwitchResponse(data).toPacket());
    });
    return;
  }
  if (!authPlugin) {
    authPlugin = standardAuthPlugins[pluginName];
  }
  if (!authPlugin) {
    throw new Error(
      `Server requests authentication using unknown plugin ${pluginName}. See ${'TODO: add plugins doco here'} on how to configure or author authentication plugins.`
    );
  }
  connection._authPlugin = authPlugin({ connection, command });
  Promise.resolve(connection._authPlugin(pluginData)).then(data => {
    if (data) {
      connection.writePacket(new AuthSwitchResponse(data).toPacket());
    }
  }).catch(err => {
    authSwitchPluginError(err, command);
  });
}

function authSwitchRequestMoreData(packet: Packet, connection: Connection, command: Command) {
  const { data } = AuthSwitchRequestMoreData.fromPacket(packet);

  if (connection.config.authSwitchHandler) {
    const legacySwitchHandler = connection.config.authSwitchHandler;
    warnLegacyAuthSwitch();
    legacySwitchHandler({ pluginData: data }, (err: Error, data: Buffer) => {
      if (err) {
        return authSwitchPluginError(err, command);
      }
      connection.writePacket(new AuthSwitchResponse(data).toPacket());
    });
    return;
  }

  if (!connection._authPlugin) {
    throw new Error(
      'AuthPluginMoreData received but no auth plugin instance found'
    );
  }
  Promise.resolve(connection._authPlugin(data)).then(data => {
    if (data) {
      connection.writePacket(new AuthSwitchResponse(data).toPacket());
    }
  }).catch(err => {
    authSwitchPluginError(err, command);
  });
}

export {
  authSwitchRequest,
  authSwitchRequestMoreData
}
